//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/GameMechanics/Runtime/Scripts/PlayerScripts/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""SpaceshipControl"",
            ""id"": ""41b1c4c8-1b68-4caa-82ed-685488ac45c0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5d349606-868c-4db7-8ad5-2fd144465c3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayTurn"",
                    ""type"": ""Button"",
                    ""id"": ""0d5ad4a7-9f8f-48c4-bd29-19cac49d81d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4bc09ff2-51ed-46e9-af5f-79e35201ed62"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Press"",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f2b12385-34ee-4010-933f-eba00dfb03f2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""77123ef0-f021-4725-89c4-67d1c42ff300"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e26b95b-0d28-4c4f-88c8-12c0aa046c6a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d8226a49-be78-4db4-9389-7f2fa2593b9c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""eb0f971e-7c5a-40b4-bbd2-04e228f8f564"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpaceshipControl
        m_SpaceshipControl = asset.FindActionMap("SpaceshipControl", throwIfNotFound: true);
        m_SpaceshipControl_Movement = m_SpaceshipControl.FindAction("Movement", throwIfNotFound: true);
        m_SpaceshipControl_PlayTurn = m_SpaceshipControl.FindAction("PlayTurn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceshipControl
    private readonly InputActionMap m_SpaceshipControl;
    private ISpaceshipControlActions m_SpaceshipControlActionsCallbackInterface;
    private readonly InputAction m_SpaceshipControl_Movement;
    private readonly InputAction m_SpaceshipControl_PlayTurn;
    public struct SpaceshipControlActions
    {
        private @PlayerControl m_Wrapper;
        public SpaceshipControlActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_SpaceshipControl_Movement;
        public InputAction @PlayTurn => m_Wrapper.m_SpaceshipControl_PlayTurn;
        public InputActionMap Get() { return m_Wrapper.m_SpaceshipControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceshipControlActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceshipControlActions instance)
        {
            if (m_Wrapper.m_SpaceshipControlActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_SpaceshipControlActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_SpaceshipControlActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_SpaceshipControlActionsCallbackInterface.OnMovement;
                @PlayTurn.started -= m_Wrapper.m_SpaceshipControlActionsCallbackInterface.OnPlayTurn;
                @PlayTurn.performed -= m_Wrapper.m_SpaceshipControlActionsCallbackInterface.OnPlayTurn;
                @PlayTurn.canceled -= m_Wrapper.m_SpaceshipControlActionsCallbackInterface.OnPlayTurn;
            }
            m_Wrapper.m_SpaceshipControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @PlayTurn.started += instance.OnPlayTurn;
                @PlayTurn.performed += instance.OnPlayTurn;
                @PlayTurn.canceled += instance.OnPlayTurn;
            }
        }
    }
    public SpaceshipControlActions @SpaceshipControl => new SpaceshipControlActions(this);
    public interface ISpaceshipControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPlayTurn(InputAction.CallbackContext context);
    }
}
